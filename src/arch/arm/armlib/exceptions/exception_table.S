/**
 * @file
 * @brief
 *
 * @author  Anton Kozlov
 * @date    10.09.2012
 */

/**
 * exceptions table:
 * 0x00 - reset
 * 0x04 - undefined
 * 0x08 - SWI
 * 0x0C - prefetch abort
 * 0x10 - data abort
 * 0x14 - reserved
 * 0x18 - IRQ
 * 0x1C - FIQ (_fast IRQ)
 */

#include <asm/modes.h>
#include <asm/regs.h>

.extern irq_handler
.extern setup_excpt_table
.extern reset_handler

.section .trap_table, "x"
.global arm_trap_table
arm_trap_table:
/* trap table
 * this code specific for ARM7TDMI cores
 *
 * actually, this is general for all ARM cores
 */
    ldr pc, reset_handler_addr
    ldr pc, undef_handler_addr
    ldr pc, swi_handler_addr
    ldr pc, prefetch_abt_handler_addr
    b data_abt_prepare
    nop /*bad exception not_used:		.word not_used*/
    ldr pc, irq_handler_addr
    ldr pc, fiq_handler_addr

reset_handler_addr:
    .word reset_handler
undef_handler_addr:
    .word undef_handler
swi_handler_addr:
    .word swi_handler
prefetch_abt_handler_addr:
    .word prefetch_abt_handler
.global data_abt_handler_addr
data_abt_handler_addr:
    .word data_abt_handler
irq_handler_addr:
    .word irq_handler
fiq_handler_addr:
    .word fiq_handler

data_abt_prepare:
	/* Prepare stack and call handler */
	stmfd r13!, {r0-r3, r14}
	add r14, pc, #0
	ldr pc, data_abt_handler_addr
	ldmfd r13!, {r0-r3, r14}
	subs pc, lr, #8 // exception return

undef_handler:
#ifdef __ARM_NEON__
    sub r14, r14, #4

    stmfd sp!, {r0-r2} /* Save temp regs */
    mov r2, r14
    mrs r1, SPSR
    mov r0, sp         /* Pointer to saved regs */
    add sp, sp, #12    /* Return SP to previous state */

    msr CPSR, #ARM_MODE_SYS | I_BIT | F_BIT
    stmfd sp!, {r1}    /* Store arguments for RFE instruction */
    stmfd sp!, {r2}
    ldmfd r0, {r0-r2}  /* Restore temp regs */

    mov r0, sp		/* Pointer to registers */
    stmfd sp!, {r0-r12, r14}
    bl arm_undefined_exception

    ldmfd sp!, {r0-r12, r14}

    rfe sp!
#endif /* __ARM_NEON__ */

prefetch_abt_handler:
fiq_handler:
    sub r14, r14, #4
    b arm_unresolvable_exception
arm_unresolvable_exception:
    mrc p15, 0, r0, c1, c0, 0
    and r0, r0, #~CR_M
    mcr p15, 0, r0, c1, c0, 0
    ldr sp, =_stack_top
    nop
    stmfd sp!, {r0-r12, r14}
    mrs r0, CPSR
    mrs r1, SPSR
    stmfd sp!, {r0, r1}
    mov r0, sp
    b arm_exception_handler
